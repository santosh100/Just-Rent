package PROJECT;

import com.sun.glass.events.KeyEvent;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user1
 */
public class MyBooking extends javax.swing.JInternalFrame {

    private PreparedStatement pstmt;
    private ResultSet rs;
    private DefaultTableModel model = new DefaultTableModel();
    static int SUPPLIER_ID;

    public MyBooking() {

        initComponents();
//        snameTextField.requestFocusInWindow();        
        addRecordIntoTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rnoTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        roomtypeComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        inDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        outDateChooser = new com.toedter.calendar.JDateChooser();
        cidTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        moneyTextField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();

        setOpaque(true);
        setPreferredSize(new java.awt.Dimension(1385, 700));

        jPanel1.setBackground(new java.awt.Color(204, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel2.setText("Room No");

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel3.setText("Room Type");

        jLabel6.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel6.setText("Customer Id");

        rnoTextField.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        rnoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rnoTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rnoTextFieldKeyTyped(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12)); // NOI18N
        saveButton.setText("BOOK");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12)); // NOI18N
        updateButton.setText("MODIFY");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12)); // NOI18N
        resetButton.setText("RESET");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        roomtypeComboBox.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        roomtypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----Select-----" }));

        jLabel9.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel9.setText("From");

        inDateChooser.setAutoscrolls(true);
        inDateChooser.setDateFormatString("d MMM, yyyy");

        jLabel10.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel10.setText("Till");

        outDateChooser.setAutoscrolls(true);
        outDateChooser.setDateFormatString("d MMM, yyyy");

        cidTextField.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        cidTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cidTextFieldKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        jLabel7.setText("Advance Money");

        moneyTextField.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        moneyTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                moneyTextFieldKeyTyped(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12)); // NOI18N
        cancelButton.setText("CANCEL");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moneyTextField)
                    .addComponent(rnoTextField)
                    .addComponent(outDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomtypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cidTextField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(17, 17, 17))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rnoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(roomtypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(inDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(outDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(moneyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(resetButton))
                .addGap(112, 112, 112))
        );

        jPanel4.setBackground(new java.awt.Color(102, 0, 102));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ROOM BOOKING");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1079, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ROOM NO", "ROOM TYPE", "CUSTOMER ID", "CUSTOMER NAME", "FROM", "TILL", "ADVANCE"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel8.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("BOOKING DETAIL");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * ******************************************************************************************
     */
    public void addRecordIntoTable() {
        pstmt = null;
        rs = null;
        try {
            //    pstmt = MyLogin.con.prepareStatement("select * from SUPPLIER_DETAIL where SUPPLIER_NAME like '" + sname + "%'", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            String query = "SELECT BOOKING_DETAIL.ROOM_NO, BOOKING_DETAIL.IN_DT, BOOKING_DETAIL.OUT_DT, ROOM_DETAIL.ROOM_TYPE, BOOKING_DETAIL.C_ID, CUSTOMER_DETAIL.C_NAME, BOOKING_DETAIL.ADVANCE_PAY FROM CUSTOMER_DETAIL INNER JOIN (ROOM_DETAIL INNER JOIN BOOKING_DETAIL ON ROOM_DETAIL.ROOM_NO = BOOKING_DETAIL.ROOM_NO) ON CUSTOMER_DETAIL.C_ID = BOOKING_DETAIL.C_ID WHERE (((BOOKING_DETAIL.ROOM_NO) <> 0)) ORDER BY BOOKING_DETAIL.ROOM_NO;";
            pstmt = MyLogin.con.prepareStatement(query, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = pstmt.executeQuery();
            pstmt.clearParameters();

            DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
            while (tm.getRowCount() > 0) {
                tm.removeRow(0);
            }
            while (rs.next()) {
                Object kk[] = {rs.getInt("ROOM_NO"), rs.getString("ROOM_TYPE"), rs.getInt("C_ID"), rs.getString("C_NAME"), rs.getDate("IN_DT"), rs.getDate("OUT_DT"), rs.getInt("ADVANCE_PAY")};
                tm.addRow(kk);
            }
        } catch (Exception e) {
            System.out.println(" Error in showing detail " + e);
        }
    }

    /**
     * ***************************************************************************************************
     */
    private void clearFields() {
        rnoTextField.setText("");
        roomtypeComboBox.removeAllItems();
        roomtypeComboBox.addItem("-----Select-----");
        cidTextField.setText("");
        inDateChooser.setDate(null);
        outDateChooser.setDate(null);
        moneyTextField.setText("");
    }

    /**
     * ******************************************************************************************************
     */
    private int checkRoom(int rno) {
        try {
            pstmt = MyLogin.con.prepareStatement("select * from ROOM_DETAIL where ROOM_NO = ?");
            pstmt.setInt(1, rno);
            rs = pstmt.executeQuery();
            pstmt.clearParameters();
            if (rs.next()) {
                return 1;
            }
        } catch (Exception e) {
            System.out.println(" Error inside checkROOM method " + e);
        }
        return 0;
    }

    /**
     * ******************************************************************************************************
     */
    private int checkRoomAvailability(int rno) {
        try {
            pstmt = MyLogin.con.prepareStatement("select * from BOOKING_DETAIL where ROOM_NO = ?");
            pstmt.setInt(1, rno);
            rs = pstmt.executeQuery();
            pstmt.clearParameters();
            if (rs.next()) {
                return 1;
            }
        } catch (Exception e) {
            System.out.println(" Error inside checkROOM method " + e);
        }
        return 0;
    }
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        String room_type, in_date, out_date;
        room_type = roomtypeComboBox.getSelectedItem().toString();
        DateFormat df;
        df = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.UK);
        try {
            in_date = df.format(inDateChooser.getDate());
            out_date = df.format(outDateChooser.getDate());
            int rno = Integer.parseInt(rnoTextField.getText().trim());
            if (room_type.equalsIgnoreCase("-----Select-----") || cidTextField.getText().trim().equals("") || moneyTextField.getText().trim().equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(null, "FILL ALL DETAILS CAREFULLY", "BOOK ROOM", JOptionPane.ERROR_MESSAGE);
            } else if (checkRoom(rno) != 1) {
                JOptionPane.showMessageDialog(null, "NO SUCH ROOM AVAILABLE WITH THE ROOM NO", "BOOK ROOM", JOptionPane.ERROR_MESSAGE);
            } else if (checkRoomAvailability(rno) == 1) {
                JOptionPane.showMessageDialog(null, "Room has been already booked", "BOOK ROOM", JOptionPane.ERROR_MESSAGE);
            } else {
                int cid = Integer.parseInt(cidTextField.getText().trim());
                int advance_money = Integer.parseInt(moneyTextField.getText().trim());
                java.util.Date date = new java.util.Date();
                String booked_date = df.format(date);

                pstmt = MyLogin.con.prepareStatement("insert into BOOKING_DETAIL (C_ID,ROOM_NO,BOOKED_DT,IN_DT,OUT_DT,ADVANCE_PAY) values(?,?,?,?,?,?)", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                pstmt.setInt(1, cid);
                pstmt.setInt(2, rno);
                pstmt.setString(3, booked_date);
                pstmt.setString(4, in_date);
                pstmt.setString(5, out_date);
                pstmt.setInt(6, advance_money);
                int i = pstmt.executeUpdate();
                pstmt.clearParameters();
                if (i > 0) {
                    JOptionPane.showMessageDialog(null, "Booking successfull", "ROOM BOOKING", JOptionPane.INFORMATION_MESSAGE);
                    clearFields();
                    addRecordIntoTable();
                } else {
                    System.out.println("Problem in insertion data in BOOKING_DETAIL TABLE");
                }
            }
        } catch (Exception e) {
            System.out.println("Error inside " + e);
        }
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * ***********************************************************************
     */
    public void test() {
        pstmt = null;
        rs = null;
        try {
            int rno = Integer.parseInt(rnoTextField.getText());
            pstmt = MyLogin.con.prepareStatement("select * from BOOKING_DETAIL where ROOM_NO = ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            pstmt.setInt(1, rno);
            rs = pstmt.executeQuery();
            pstmt.clearParameters();
            rs.next();
        } catch (Exception e) {
            System.out.println(" Error in test " + e);
        }
    }
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:                
        try {
            String room_type = roomtypeComboBox.getSelectedItem().toString();
            DateFormat df;
            df = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.UK);
            String in_date = df.format(inDateChooser.getDate());
            String out_date = df.format(outDateChooser.getDate());
            if (!(rnoTextField.getText().trim().equalsIgnoreCase("") || cidTextField.getText().trim().equalsIgnoreCase("") || moneyTextField.getText().trim().equalsIgnoreCase(""))) {
                int rno = Integer.parseInt(rnoTextField.getText().trim());
                int cid = Integer.parseInt(cidTextField.getText().trim());
                int money = Integer.parseInt(moneyTextField.getText().trim());
                if (checkRoom(rno) != 1) {
                    JOptionPane.showMessageDialog(null, "NO SUCH ROOM AVAILABLE", "UPDATION  ERROR", JOptionPane.ERROR_MESSAGE);
                } else if (checkRoomAvailability(rno) == 1 && rs.getInt("ROOM_NO") != rno) {
                    JOptionPane.showMessageDialog(null, "The room you want to book has been already booked", "UPDATION  ERROR", JOptionPane.ERROR_MESSAGE);
                } else if (money <= 0) {
                    JOptionPane.showMessageDialog(null, "MONEY CANNOT BE ZERO OR NEGATIVE", "UPDATION  ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    test();
                    if (!(rno == rs.getInt("ROOM_NO") && cid == rs.getInt("C_ID") && in_date.equalsIgnoreCase(df.format(rs.getDate("IN_DT"))) && out_date.equalsIgnoreCase(df.format(rs.getDate("OUT_DT"))))) {
                        pstmt = MyLogin.con.prepareStatement("update BOOKING_DETAIL set C_ID = ?, ROOM_NO = ?, IN_DT = ?, OUT_DT = ?, ADVANCE_PAY = ? where ROOM_NO = ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        pstmt.setInt(1, cid);
                        pstmt.setInt(2, rno);
                        pstmt.setString(3, in_date);
                        pstmt.setString(4, out_date);
                        pstmt.setInt(5, money);
                        pstmt.setInt(6, rno);
                        int i = pstmt.executeUpdate();
                        pstmt.clearParameters();
                        if (i > 0) {
                            JOptionPane.showMessageDialog(null, "Detail Updated Successfully", "UPDATE", JOptionPane.INFORMATION_MESSAGE);
                            clearFields();
                            addRecordIntoTable();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Make some chages to modify", "UPDATION  ERROR", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "NO CHANGES MADE", "UPDATION CANCLED", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "CHOOSE ANY RECORD TO UPDATE", "ZERO SUPPLIER SELECTED", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            System.out.println("Exception inside update button " + e);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:        
        clearFields();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void rnoTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rnoTextFieldKeyReleased
        // TODO add your handling code here:
        if (rnoTextField.getText().trim().equalsIgnoreCase("")) {
            roomtypeComboBox.removeAllItems();
            roomtypeComboBox.addItem("-----Select-----");
        } else {
            try {
                int room_no = Integer.parseInt(rnoTextField.getText().trim());
                pstmt = MyLogin.con.prepareStatement("select ROOM_TYPE from ROOM_DETAIL where ROOM_NO = ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                pstmt.setInt(1, room_no);
                rs = pstmt.executeQuery();
                pstmt.clearParameters();

                if (rs.next()) {
                    roomtypeComboBox.removeAllItems();
                    roomtypeComboBox.addItem(rs.getString("ROOM_TYPE"));
                } else {
                    roomtypeComboBox.removeAllItems();
                    roomtypeComboBox.addItem("-----Select-----");
                }
            } catch (Exception e) {
                System.out.println("" + e);
            }

        }
    }//GEN-LAST:event_rnoTextFieldKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        try {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int rowIndex = jTable1.getSelectedRow();
            if (rowIndex > -1) {
                rnoTextField.setText(model.getValueAt(rowIndex, 0).toString());
                roomtypeComboBox.removeAllItems();
                if (model.getValueAt(rowIndex, 1).toString().equalsIgnoreCase("AC")) {
                    roomtypeComboBox.addItem("AC");
                    roomtypeComboBox.addItem("NON-AC");
                } else {
                    roomtypeComboBox.addItem("NON-AC");
                    roomtypeComboBox.addItem("AC");
                }
                cidTextField.setText(model.getValueAt(rowIndex, 2).toString());
                inDateChooser.setDate(Date.valueOf(model.getValueAt(rowIndex, 4).toString()));
                outDateChooser.setDate(Date.valueOf(model.getValueAt(rowIndex, 5).toString()));
                moneyTextField.setText(model.getValueAt(rowIndex, 6).toString());
            }
        } catch (Exception e) {
            System.out.println("Exception " + e);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        try {
            int id = Integer.parseInt(rnoTextField.getText().trim());
            int j = JOptionPane.showConfirmDialog(null, "Are you sure you want to permanently delete this record", "Delete Record", JOptionPane.CANCEL_OPTION);
            if (j == 0) {
                pstmt = MyLogin.con.prepareStatement("delete from BOOKING_DETAIL where ROOM_NO = ?");
                pstmt.setInt(1, id);
                int i = pstmt.executeUpdate();
                pstmt.clearParameters();
                if (i == 1) {
                    JOptionPane.showMessageDialog(null, "BOOKING CANCELED", "CANCEL", JOptionPane.INFORMATION_MESSAGE);
                    clearFields();
                    addRecordIntoTable();
                } else {
                    JOptionPane.showMessageDialog(null, "BOOKING CANCELATION FAILED \nSELECT ANY DETAIL FROM TABLE (only) TO CANCEL", "CANCEL", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "CANN'T BE PERFORMED \nSELECT ANY DETAIL FROM TABLE (only) TO CANCEL", "CANCEL", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "SELECT ANY DETAIL FROM TABLE TO CANCEL", "ZERO ROW SELECTED", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            System.out.println("Exception inside delete button " + e);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void rnoTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rnoTextFieldKeyTyped
        // TODO add your handling code here:
        checkNumbers(evt, rnoTextField);
    }//GEN-LAST:event_rnoTextFieldKeyTyped

    private void cidTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cidTextFieldKeyTyped
        // TODO add your handling code here:
        checkNumbers(evt, cidTextField);
    }//GEN-LAST:event_cidTextFieldKeyTyped

    private void moneyTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moneyTextFieldKeyTyped
        // TODO add your handling code here:
        checkNumbers(evt, moneyTextField);
    }//GEN-LAST:event_moneyTextFieldKeyTyped

    /**
     * @param evt
     *
     * @param
     * letters*************************************************************************************
     */
    public void checkLetters(java.awt.event.KeyEvent evt, String letters) {
        char cr = evt.getKeyChar();
        if (!((Character.isLetter(cr)) || (cr == KeyEvent.VK_BACKSPACE) || (cr == KeyEvent.VK_SPACE))) {
            getToolkit().beep();
            evt.consume();
        }
        if (letters.length() > 49) {
            getToolkit().beep();
            evt.consume();
        }
    }

    /**
     * @param evt
     * @param fieldname
     *
     *
     **************************************************************************************
     */
    public void checkNumbers(java.awt.event.KeyEvent evt, javax.swing.JTextField fieldname) {
        char cr = evt.getKeyChar();
        if (!(Character.isDigit(cr) || (cr == KeyEvent.VK_BACKSPACE) || cr == KeyEvent.VK_DELETE)) {
            getToolkit().beep();
            evt.consume();
        }
        if (fieldname.getText().length() > 9) {
            getToolkit().beep();
            evt.consume();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField cidTextField;
    private com.toedter.calendar.JDateChooser inDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField moneyTextField;
    private com.toedter.calendar.JDateChooser outDateChooser;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField rnoTextField;
    private javax.swing.JComboBox<String> roomtypeComboBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

}
